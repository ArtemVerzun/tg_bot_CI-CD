import telebot
from telebot import types
import requests

bot = telebot.TeleBot('u token')



@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    mess = f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>"

    info = types.KeyboardButton('üí¨ –û –ë–æ—Ç–µ')
    git = types.KeyboardButton('‚ôª GitHub')
    main = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

    markup.add(info, git, main)
    bot.send_message(message.chat.id, mess, parse_mode="html", reply_markup=markup)


@bot.message_handler(commands=['main'])
def start_inline(message):
    markup = types.InlineKeyboardMarkup(row_width=1)

    add_process = types.InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å', callback_data='ap')
    view_process = types.InlineKeyboardButton('üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤', callback_data='vp')
    delete_process = types.InlineKeyboardButton('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤', callback_data='dp')
    run_process = types.InlineKeyboardButton('‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å', callback_data='rp')

    markup.add(add_process, view_process, delete_process, run_process)
    bot.send_message(message.chat.id, "–í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", reply_markup=markup)

list_proc = set()

def create_proc(owner, repo, workflow):
    return owner + ", " + repo + ", " + workflow

g_owner = ""
g_repo = ""
g_work = ""
g_token = ""
g_ref = ""

@bot.message_handler(commands=['list'])
def show_list(message):
    if len(list_proc) == 0:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
    else:
        bot.send_message(message.chat.id, "\n".join(list_proc))


@bot.message_handler(commands=['fill'])
def add_start(message):
    m = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ owner ")
    bot.register_next_step_handler(m, add_owner)

def add_owner(message):
    print(1)
    global g_owner
    g_owner = message.text
    m = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ repo ")
    bot.register_next_step_handler(m, add_repo)

def add_repo(message):
    print(2)
    global g_repo
    g_repo = message.text
    m = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ workflow ")
    bot.register_next_step_handler(m, add_work)

def add_work(message):
    print(3)
    global g_work
    g_work = message.text
    m = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ token ")
    bot.register_next_step_handler(m, add_ref())

def add_ref(message):
    print(4)
    global g_ref
    g_work = message.text
    m = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ref ")
    bot.register_next_step_handler(m, add_token)

def add_token(message):
    print(5)
    global g_token
    g_token = message.text
    bot.send_message(message.chat.id, "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ: " + g_owner + "/" + g_repo + "/" + g_work + "/" + g_ref + "/\n" + g_token)
    bot.send_message(message.chat.id, "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–ø–∏—à–∏—Ç–µ /add\n–ï—Å–ª–∏ –æ—à–∏–±–ª–∏—Å—å –ø—Ä–∏ –≤–≤–æ–¥–µ –ø—Ä–æ–ø–∏—à–∏—Ç–µ /fill\n –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–ø–∏—à–∏—Ç–µ /drop ")

@bot.callback_query_handler(func=lambda callback: callback.data)
def check_callback_data(callback):
    if callback.data == "ap":
        bot.send_message(callback.message.chat.id, "–ü—Ä–æ–ø–∏—à–∏—Ç–µ /fill –∏ –∑–∞—Ç–µ–º –≤–Ω–µ—Å–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ\n\n–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è\n–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ ")
    elif callback.data == "vp":
        bot.send_message(callback.message.chat.id, "–ü—Ä–æ–ø–∏—à–∏—Ç–µ /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞") # –ò—Å–ø—Ä–∞–≤–∏—Ç—å
    elif callback.data == "dp":
        bot.send_message(callback.message.chat.id, "–ü—Ä–æ–ø–∏—à–∏—Ç–µ /fill –∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å") # –ù–∞–¥–æ —Å–¥–µ–ª–∞—å
    elif callback.data == "rp":
        bot.send_message(callback.message.chat.id, "–ü—Ä–æ–ø–∏—à–∏—Ç–µ /run –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞") # –°–¥–µ–ª–∞—Ç—å
    else:
        bot.send_message(callback.message.chat.id, "–æ—Ç–º–µ–Ω–∞ ")



@bot.message_handler(content_types=['text'])
def func(message):
    if (message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):

        markup = types.InlineKeyboardMarkup(row_width=1)

        add_process = types.InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å', callback_data='ap')
        view_process = types.InlineKeyboardButton('üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤', callback_data='vp')
        delete_process = types.InlineKeyboardButton('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤', callback_data='dp')
        run_process = types.InlineKeyboardButton('‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å', callback_data='rp')

        markup.add(add_process, view_process, delete_process, run_process)
        bot.send_message(message.chat.id, "–í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", reply_markup=markup)

    elif (message.text == "üí¨ –û –ë–æ—Ç–µ"):
        mess = (f"<b>–ë–æ—Ç –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –Ω–∞ —è–∑—ã–∫–µ Python –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ CI/CD –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–∞ GitHub.com</b>\n\n"
                f"–ë–æ—Ç –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" 
                f"1. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤ –±–æ—Ç–µ) –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ CI/CD. –í—ã–≤–æ–¥—è—Ç—Å—è owner/repo –∏ workflow_id –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.\n" 
                f"2. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å CI/CD –≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö. –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é owner, –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è "
                f"repo, –∏–º—è —Ñ–∞–π–ª–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ CI/CD –∏–ª–∏ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä workflow_id, —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ GitHub API\n"
                f"3. –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å CI/CD –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.\n"
                f"4. –í—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö CI/CD –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å.")

        bot.send_message(message.chat.id, mess, parse_mode='html')

    elif (message.text == "‚ôª GitHub"):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ü–æ—Å–µ—Ç–∏—Ç—å GitHup.com", url="https://github.com"))
        bot.send_message(message.chat.id, "–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", reply_markup=markup)

    elif (message.text == "/add"):
        #g_owner = "suai-os-2022"
        #g_repo = "os-task5-verzunartem"
        #g_work = "bash.yml"
        #g_token = "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"

        print(g_owner, g_repo, g_work)
        response = requests.get("https://api.github.com/repos/" + g_owner + "/" + g_repo + "/actions/workflows/" + g_work, headers={"Authorization": "token " + g_token, "Accept": "application/vnd.github+json"})

        cod = response.status_code
        msg = response.headers
        print("___________MSG___________")
        print(msg)
        print(cod)
        if (cod == 200):
            print(cod)
            bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—â–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ CI/CD –±–æ—Ç")
            list_proc.add(g_owner + ", " + g_repo + ", " + g_work)
        elif (cod != 200):
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ —Ä–∞–∑ /fill : ")
            print(cod)
            print("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        else:
            print("—Å–±–æ–π")

    elif (message.text == "/drop"):
        proc = create_proc(g_owner, g_repo, g_work)

        if proc in list_proc:
           list_proc.remove(proc)
           bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
        else:
          print("–Ω–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞")

    elif (message.text == "/run"):
        #owner = "suai-os-2022"
        #repo = "os-task5-verzunartem"
        #work = "bash.yml"
        #token = "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"

        response = requests.put(
            "https://api.github.com/repos/" + g_owner + "/" + g_repo + "/actions/workflows/" + g_work + "/enable",
            headers={"Authorization": "token " + g_token, "Accept": "application/vnd.github+json"})

        cod = response.status_code
        msg = response.headers
        print("___________MSG1___________")
        print(msg)
        print(cod)
        if (cod == 204):
            print(cod)
            response2 = requests.post(
                "https://api.github.com/repos/" + g_owner + "/" + g_repo + "/actions/workflows/"+g_work+"/dispatches",
                    headers={"Authorization": "token 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", "Accept": "application/vnd.github+json"},
                    data='{"g_ref:"master"}')

            cot = response2.status_code
            mst = response2.content
            print("___________MSG2___________")
            print(cot)
            print(mst)

        elif (cod != 204):
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: ")
            print(cod)
            print("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        else:
            print("—Å–±–æ–π")

    else:
        bot.send_message(message.chat.id, "-")





@bot.message_handler()
def get_user_text(message):
    if message.text == "–ü—Ä–∏–≤–µ—Ç":
        bot.send_message(message.chat.id, "–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç", parse_mode='html')
    elif message.text == "id":
        bot.send_message(message.chat.id, f"–¢–≤–æ–π ID: {message.from_user.id}", parse_mode='html')
    else:
        bot.send_message(message.chat.id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é", parse_mode='html')


bot.polling(none_stop=True)
